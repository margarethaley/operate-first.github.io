{"componentChunkName":"component---src-templates-markdown-js","path":"/data-science/data-skipping/site/docs/getting-started/quick-start-guide.md","result":{"data":{"site":{"siteMetadata":{"title":"Operate First"}},"markdownRemark":{"id":"56334269-fe61-5773-b333-04bdf454f8aa","html":"<!--\n -- Copyright 2021 IBM Corp.\n -- SPDX-License-Identifier: Apache-2.0\n -->\n<h1 id=\"quick-start-guide\" style=\"position:relative;\"><a href=\"#quick-start-guide\" aria-label=\"quick start guide permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Quick-Start Guide</h1>\n<p>This guide helps you quickly get started using Xskipper with Apache Spark.</p>\n<p>!!! note\nFor advanced details see the <a href=\"../api/indexing.md\">API</a> section and the full <a href=\"../api/api-reference.md\">API Reference</a>.\nSee <a href=\"sample-notebooks.md\">here</a> for sample notebooks.</p>\n<h2 id=\"setup-apache-spark-with-xskipper\" style=\"position:relative;\"><a href=\"#setup-apache-spark-with-xskipper\" aria-label=\"setup apache spark with xskipper permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setup Apache Spark with Xskipper</h2>\n<p>Xskipper is compatible with Apache Spark 3.0. There are two ways to setup Xskipper:</p>\n<ol class=\"pf-c-list\">\n<li>Run interactively: Start the Spark shell (Scala or Python) with Xskipper and explore Xskipper interactively.</li>\n<li>Run as a project: Set up a Maven or SBT project (Scala or Java) with Xskipper.</li>\n</ol>\n<h3 id=\"run-with-an-interactive-shell\" style=\"position:relative;\"><a href=\"#run-with-an-interactive-shell\" aria-label=\"run with an interactive shell permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run with an interactive shell</h3>\n<p>To use Xskipper interactively within the Spark’s Scala/Python shell, you need a local installation of Apache Spark.\nFollow the instructions <a href=\"https://spark.apache.org/downloads.html\">here</a> to install Apache Spark.</p>\n<h4 id=\"spark-scala-shell\" style=\"position:relative;\"><a href=\"#spark-scala-shell\" aria-label=\"spark scala shell permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spark Scala Shell</h4>\n<p>Start a Spark Scala shell as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">./bin/spark-shell --packages io.xskipper:xskipper-core_2.12:1.2.3</code></pre></div>\n<h4 id=\"pyspark\" style=\"position:relative;\"><a href=\"#pyspark\" aria-label=\"pyspark permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PySpark</h4>\n<p>Install or upgrade PySpark (3.0 or above) by running the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> --upgrade pyspark</code></pre></div>\n<p>Then, run PySpark with the Xskipper package:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pyspark --packages io.xskipper:xskipper-core_2.12:1.2.3</code></pre></div>\n<h3 id=\"run-as-a-project\" style=\"position:relative;\"><a href=\"#run-as-a-project\" aria-label=\"run as a project permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Run as a project</h3>\n<p>To build a project using the Xskipper binaries from the Maven Central Repository, use the following Maven coordinates:</p>\n<h4 id=\"maven\" style=\"position:relative;\"><a href=\"#maven\" aria-label=\"maven permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Maven</h4>\n<p>Include Xskipper in a Maven project by adding it as a dependency in the project’s POM file. Xskipper should be compiled with Scala 2.12.</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>io.xskipper<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>xskipper-core_2.12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>1.2.3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h4 id=\"sbt\" style=\"position:relative;\"><a href=\"#sbt\" aria-label=\"sbt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SBT</h4>\n<p>Include Xskipper in an SBT project by adding the following line to its build.sbt file:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">libraryDependencies <span class=\"token operator\">+=</span> <span class=\"token string\">\"io.xskipper\"</span> <span class=\"token operator\">%</span><span class=\"token operator\">%</span> <span class=\"token string\">\"xskipper-core\"</span> <span class=\"token operator\">%</span> <span class=\"token string\">\"1.2.3\"</span></code></pre></div>\n<h4 id=\"python\" style=\"position:relative;\"><a href=\"#python\" aria-label=\"python permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Python</h4>\n<p>To set up a Python project, first start the Spark session using the Xskipper package and then import the Python APIs.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">spark <span class=\"token operator\">=</span> pyspark<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span>SparkSession<span class=\"token punctuation\">.</span>builder<span class=\"token punctuation\">.</span>appName<span class=\"token punctuation\">(</span><span class=\"token string\">\"Xskipper\"</span><span class=\"token punctuation\">)</span> \\\n    <span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">(</span><span class=\"token string\">\"spark.jars.packages\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"io.xskipper:xskipper-core_2.12:1.2.3\"</span><span class=\"token punctuation\">)</span> \\\n    <span class=\"token punctuation\">.</span>getOrCreate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">from</span> xskipper <span class=\"token keyword\">import</span> Xskipper\n<span class=\"token keyword\">from</span> xskipper <span class=\"token keyword\">import</span> Registration</code></pre></div>\n<h2 id=\"configure-xskipper\" style=\"position:relative;\"><a href=\"#configure-xskipper\" aria-label=\"configure xskipper permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Configure Xskipper</h2>\n<p>In this example, we configure a JVM wide parameter to a base path which stores all data skipping indexes.\nThe indexes can be stored on the same storage system as the data, but not under the same path.\nDuring query time indexes will be consulted at this location.\n!!! Note\nDeduplication during filtering is documented as <code class=\"language-text\">false</code> by default, but in version <code class=\"language-text\">1.2.3</code> it accidentally defaults to <code class=\"language-text\">true</code>.\nthis cannot affect query results, but may degrade performance.\nas a workaround, it can be manually set <code class=\"language-text\">io.xskipper.parquet.filter.dedup</code> to <code class=\"language-text\">false</code>.</p>\n<p>For more configuration options, see <a href=\"../api/configuration/configuration.md\">configuration options</a>.</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\nfrom xskipper import Xskipper\n\n# The base location to store all indexes \n# TODO: change to your index base location\nmd_base_location = &quot;/tmp/metadata&quot;\n\n# Configuring the JVM wide parameters\nconf = dict([\n            (&quot;io.xskipper.parquet.mdlocation&quot;, md_base_location),\n            (&quot;io.xskipper.parquet.mdlocation.type&quot;, &quot;EXPLICIT_BASE_PATH_LOCATION&quot;),\n            (&quot;io.xskipper.parquet.filter.dedup&quot;, &quot;false&quot;)])\nXskipper.setConf(spark, conf)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nimport io.xskipper._\nimport io.xskipper.implicits._\n\n// The base location to store all indexes\n// TODO: change to your index base location\nval md_base_location = s&quot;/tmp/metadata&quot;\n\n// Configuring the JVM wide parameters\nval conf = Map(\n  &quot;io.xskipper.parquet.mdlocation&quot; -&gt; md_base_location,\n  &quot;io.xskipper.parquet.mdlocation.type&quot; -&gt; &quot;EXPLICIT_BASE_PATH_LOCATION&quot;,\n  &quot;io.xskipper.parquet.filter.dedup&quot; -&gt; &quot;false&quot;)\nXskipper.setConf(conf)\n```</code></pre></div>\n<h2 id=\"indexing-a-dataset\" style=\"position:relative;\"><a href=\"#indexing-a-dataset\" aria-label=\"indexing a dataset permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Indexing a Dataset</h2>\n<h3 id=\"creating-a-sample-dataset\" style=\"position:relative;\"><a href=\"#creating-a-sample-dataset\" aria-label=\"creating a sample dataset permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a Sample Dataset</h3>\n<p>First, let’s create a sample dataset.</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\nfrom pyspark.sql.types import *\n\n# TODO: change to your data location\ndataset_location = &quot;/tmp/data&quot;\n\ndf_schema = StructType([StructField(&quot;dt&quot;, StringType(), True), StructField(&quot;temp&quot;, DoubleType(), True),\\\n                      StructField(&quot;city&quot;, StringType(), True), StructField(&quot;vid&quot;, StringType(), True)])\n\ndata = [(&quot;2017-07-07&quot;, 20.0, &quot;Tel-Aviv&quot;, &quot;a&quot;), (&quot;2017-07-08&quot;, 30.0, &quot;Jerusalem&quot;, &quot;b&quot;)]\n\ndf = spark.createDataFrame(data, schema=df_schema)\n\n# use partitionBy to make sure we have two objects\ndf.write.partitionBy(&quot;dt&quot;).mode(&quot;overwrite&quot;).parquet(dataset_location)\n\n# read the dataset back from storage\nreader = spark.read.format(&quot;parquet&quot;)\ndf = reader.load(dataset_location)\ndf.show(10, False)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nimport org.apache.spark.sql.Row\nimport org.apache.spark.sql.types.{DoubleType, StringType, StructField, StructType}\n\n// TODO: change to your data location\nval dataset_location = s&quot;/tmp/data&quot;\n\nval schema = List(\n  StructField(&quot;dt&quot;, StringType, true),\n  StructField(&quot;temp&quot;, DoubleType, true),\n  StructField(&quot;city&quot;, StringType, true),\n  StructField(&quot;vid&quot;, StringType, true)\n)\n\nval data = Seq(\n  Row(&quot;2017-07-07&quot;, 20.0, &quot;Tel-Aviv&quot;, &quot;a&quot;),\n  Row(&quot;2017-07-08&quot;, 30.0, &quot;Jerusalem&quot;, &quot;b&quot;)\n)\n\nval ds = spark.createDataFrame(\n  spark.sparkContext.parallelize(data),\n  StructType(schema)\n)\n\n// use partitionBy to make sure we have two objects\nds.write.partitionBy(&quot;dt&quot;).mode(&quot;overwrite&quot;).parquet(dataset_location)\n\n// read the dataset back from storage\nval reader = spark.read.format(&quot;parquet&quot;)\nval df = reader.load(dataset_location)\ndf.show(false)\n```</code></pre></div>\n<h3 id=\"indexing\" style=\"position:relative;\"><a href=\"#indexing\" aria-label=\"indexing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Indexing</h3>\n<p>When creating a data skipping index on a data set, first decide which columns to index, then choose an index type for each column.\nThese choices are workload and data dependent. Typically, choose columns to which predicates are applied in many queries.</p>\n<p>The following index types are supported out of the box:</p>\n<table class=\"pf-c-table\">\n<thead>\n<tr>\n<th>Index type</th>\n<th>Description</th>\n<th>Applicable to predicates in WHERE clauses</th>\n<th>Column types</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>MinMax</td>\n<td>Stores minimum and maximum values for a column</td>\n<td>&#x3C;,&#x3C;=,=,>=,></td>\n<td>All types except for complex types. See <a href=\"https://spark.apache.org/docs/latest/sql-ref-datatypes.html\">Supported Spark SQL data types</a>.</td>\n</tr>\n<tr>\n<td>ValueList</td>\n<td>Stores the list of unique values for the column</td>\n<td>=,IN,LIKE</td>\n<td>All types except for complex types. See <a href=\"https://spark.apache.org/docs/latest/sql-ref-datatypes.html\">Supported Spark SQL data types</a>.</td>\n</tr>\n<tr>\n<td>BloomFilter</td>\n<td>Uses a bloom filter to test for set membership</td>\n<td>=,IN</td>\n<td>Byte, String, Long, Integer, Short</td>\n</tr>\n</tbody>\n</table>\n<p>MinMax results in small index size and is a good usually choice when the dataset’s sort order is correlated with a given column. For the other 2 options,\nchoose value list if the number of distinct values in an object is typically much smaller than the total number of values in that object.\nOn the other hand Bloom filters are recommended for columns with high cardinality (otherwise the index can get as big as that column of the data set).</p>\n<p>Note that Xskipper also enables to create your own data skipping indexes and specify how to use them during query time. For more details see <a href=\"../api/creating-new-plugin.md\">here</a>.</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\n# create Xskipper instance for the sample dataset\nxskipper = Xskipper(spark, dataset_location)\n\n# remove index if exists\nif xskipper.isIndexed():\n    xskipper.dropIndex()\n\nxskipper.indexBuilder() \\\n        .addMinMaxIndex(&quot;temp&quot;) \\\n        .addValueListIndex(&quot;city&quot;) \\\n        .addBloomFilterIndex(&quot;vid&quot;) \\\n        .build(reader) \\\n        .show(10, False)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\n// create Xskipper instance for the sample dataset\nval xskipper = new Xskipper(spark, dataset_location)\n\n// remove existing index if needed\nif (xskipper.isIndexed()) {\n  xskipper.dropIndex()\n}\n\nxskipper.indexBuilder()\n        .addMinMaxIndex(&quot;temp&quot;)\n        .addValueListIndex(&quot;city&quot;)\n        .addBloomFilterIndex(&quot;vid&quot;)\n        .build(reader)\n        .show(false)\n```</code></pre></div>\n<h4 id=\"viewing-index-status\" style=\"position:relative;\"><a href=\"#viewing-index-status\" aria-label=\"viewing index status permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Viewing index status</h4>\n<p>The following code shows how a user can view the current index status to check which indexes exist on the dataset and whether the index is up-to-date.</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\nxskipper.describeIndex(reader).show(10, False)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nxskipper.describeIndex(reader).show(false)\n```</code></pre></div>\n<h4 id=\"list-indexed-datasets\" style=\"position:relative;\"><a href=\"#list-indexed-datasets\" aria-label=\"list indexed datasets permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>List Indexed datasets</h4>\n<p>The following code shows how a user can view all indexed datasets under the current base location.</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\nXskipper.listIndexes(spark).show(10, False)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nXskipper.listIndexes(spark).show(false)\n```</code></pre></div>\n<h2 id=\"using-data-skipping-indexes\" style=\"position:relative;\"><a href=\"#using-data-skipping-indexes\" aria-label=\"using data skipping indexes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Using Data Skipping Indexes</h2>\n<h3 id=\"enabledisable-xskipper\" style=\"position:relative;\"><a href=\"#enabledisable-xskipper\" aria-label=\"enabledisable xskipper permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Enable/Disable Xskipper</h3>\n<p>Xskipper provides APIs to enable or disable index usage with Spark.\nBy using the “enable” command, Xskipper optimization rules become visible to the Apache Spark optimizer and will be used in query optimization and execution.\nBy using the “disable’ command, Xskipper optimization rules no longer apply during query optimization.\nNote that disabling Xskipper has no impact on created indexes, and they remain intact.</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\n# Enable Xskipper\nXskipper.enable(spark)\n\n# Disable Xskipper\nXskipper.disable(spark)\n\n# You can use the following to check whether the Xskipper is enabled\nif not Xskipper.isEnabled(spark):\n    Xskipper.enable(spark)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\n// Enable Xskipper\nspark.enableXskipper()\n\n// Disable Xskipper\nspark.disableXskipper()\n\n// You can use the following to check whether the Xskipper is enabled\nif (!spark.isXskipperEnabled()) {\n    spark.enableXskipper()\n}\n```</code></pre></div>\n<h3 id=\"running-queries\" style=\"position:relative;\"><a href=\"#running-queries\" aria-label=\"running queries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running Queries</h3>\n<p>Once Xskipper has been enabled you can run queries (using either SQL or the DataFrame API) and enjoy the performance and cost benefits of data skipping. There will be no change to query results. </p>\n<p>First, let’s create a temporary view:</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\ndf = reader.load(dataset_location)\ndf.createOrReplaceTempView(&quot;sample&quot;)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\ndf.createOrReplaceTempView(&quot;sample&quot;)\n```</code></pre></div>\n<h4 id=\"example-query-using-the-minmax-index\" style=\"position:relative;\"><a href=\"#example-query-using-the-minmax-index\" aria-label=\"example query using the minmax index permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example query using the MinMax index</h4>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\nspark.sql(&quot;select * from sample where temp &lt; 30&quot;).show()\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nspark.sql(&quot;select * from sample where temp &lt; 30&quot;).show()\n```</code></pre></div>\n<br/>\n#### Inspecting query skipping stats\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\nXskipper.getLatestQueryAggregatedStats(spark).show(10, False)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nXskipper.getLatestQueryAggregatedStats(spark).show(false)\n```</code></pre></div>\n<p>Note: the above returns the accumulated data skipping statistics for all of the datasets which were involved in the query.\nIf you want to inspect the stats for a specific dataset you can call the API below to get stats on the Xskipper instance:</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\nxskipper.getLatestQueryStats().show(10, False)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nxskipper.getLatestQueryStats().show(false)\n```</code></pre></div>\n<p>For more examples see the <a href=\"sample-notebooks.md\">sample notebooks</a></p>\n<h2 id=\"index-life-cycle\" style=\"position:relative;\"><a href=\"#index-life-cycle\" aria-label=\"index life cycle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Index Life Cycle</h2>\n<p>The following operations can be used in order to maintain the index.</p>\n<h3 id=\"refresh-index\" style=\"position:relative;\"><a href=\"#refresh-index\" aria-label=\"refresh index permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refresh Index</h3>\n<p>Over time the index can become stale as new files are added/removed/modified from the dataset.\nIn order to bring the index up-to-date you can call the refresh operation which will index the new/modified files and remove obsolete metadata.\nNote: The index will still be beneficial for files which didn’t change since the last indexing time even without refreshing.</p>\n<p>First let’s simulate addition of new data to the dataset:</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\n# adding new file to the dataset to simulate changes in the dataset\nupdate_data = [(&quot;2017-07-09&quot;, 25.0, &quot;Beer-Sheva&quot;, &quot;c&quot;)]\n\nupdate_df = spark.createDataFrame(update_data, schema=df_schema)\n\n# append to the existing dataset\nupdate_df.write.partitionBy(&quot;dt&quot;).mode(&quot;append&quot;).parquet(dataset_location)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nval update_data = Seq(\n  Row(&quot;2017-07-09&quot;, 25.0, &quot;Beer-Sheva&quot;, &quot;c&quot;)\n)\n\nval update_ds = spark.createDataFrame(\n  spark.sparkContext.parallelize(update_data),\n  StructType(schema)\n)\n\n// append to the existing dataset\nupdate_ds.write.partitionBy(&quot;dt&quot;).mode(&quot;append&quot;).parquet(dataset_location)\n```</code></pre></div>\n<p>Now, let’s inspect the index status:</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\nxskipper.describeIndex(reader).show(10, False)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nxskipper.describeIndex(reader).show(false)\n```</code></pre></div>\n<p>In this case the index status will indicate that there are new files that are not indexed. Therefore we use the Refresh operation to update the metadata:</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\nxskipper.refreshIndex(reader).show(10, False)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nxskipper.refreshIndex(reader).show(false)\n```</code></pre></div>\n<p>Now you can run the <code class=\"language-text\">describe</code> operation again and see that the metadata is up to date.</p>\n<h3 id=\"drop-index\" style=\"position:relative;\"><a href=\"#drop-index\" aria-label=\"drop index permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Drop Index</h3>\n<p>In order to drop the index use the following API call:</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\nxskipper.dropIndex()\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nxskipper.dropIndex()\n```</code></pre></div>\n<h2 id=\"working-with-hive-tables\" style=\"position:relative;\"><a href=\"#working-with-hive-tables\" aria-label=\"working with hive tables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with Hive tables</h2>\n<p>Xskipper also supports skipping over hive tables.<br>\nNote that indexing is for Hive tables with partitions. To index tables without partitions, index the physical location directly.</p>\n<p>The API for working with hive tables is similar to the API presented above with 2 main differences:</p>\n<ol class=\"pf-c-list\">\n<li>The uri used in the Xskipper constructor is the table identifier with the form: <code class=\"language-text\">&lt;db&gt;.&lt;table&gt;</code>.</li>\n<li>The API calls do not require a DataFrameReader.</li>\n</ol>\n<p>For more information regarding the API see <a href=\"../api/indexing.md\">here</a>.</p>\n<p>The index location for a hive table is resolved according to the following:</p>\n<ul class=\"pf-c-list\">\n<li>If the table contains the parameter <code class=\"language-text\">io.xskipper.parquet.mdlocation</code> this value will be used as the index location.</li>\n<li>Otherwise, xskipper will look up the parameter <code class=\"language-text\">io.xskipper.parquet.mdlocation</code> in the table’s database and will use it as the base index location for all tables.</li>\n</ul>\n<p>Note: During indexing, the index location parameter can be automatically added to the table properties if the xskipper instance is configured accordingly.<br>\nFor more info regarding the index location configuration see <a href=\"../api/configuration/parquet-mdstore-configuration.md#types-of-metadata-location\">here</a>.</p>\n<h3 id=\"setting-the-base-index-location-in-the-database\" style=\"position:relative;\"><a href=\"#setting-the-base-index-location-in-the-database\" aria-label=\"setting the base index location in the database permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting the base index location in the database</h3>\n<p>In this example we will set the base location in the database.</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\nalter_db_ddl = (&quot;ALTER DATABASE default SET DBPROPERTIES (&#39;io.xskipper.parquet.mdlocation&#39;=&#39;{0}&#39;)&quot;).format(md_base_location)\nspark.sql(alter_db_ddl)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nval alter_db_ddl = s&quot;ALTER DATABASE default SET DBPROPERTIES (&#39;io.xskipper.parquet.mdlocation&#39;=&#39;${md_base_location}&#39;)&quot;\nspark.sql(alter_db_ddl)\n```</code></pre></div>\n<h4 id=\"creating-a-sample-hive-table\" style=\"position:relative;\"><a href=\"#creating-a-sample-hive-table\" aria-label=\"creating a sample hive table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a Sample Hive Table</h4>\n<p>Let’s create a hive table on the dataset we created earlier:</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\ncreate_table_ddl = &quot;&quot;&quot;CREATE TABLE IF NOT EXISTS tbl ( \\\ntemp Double,\ncity String,\nvid String,\ndt String\n)\nUSING PARQUET\nPARTITIONED BY (dt)\nLOCATION &#39;{0}&#39;&quot;&quot;&quot;.format(dataset_location)\nspark.sql(create_table_ddl)\n\n# recover the partitions\nspark.sql(&quot;ALTER TABLE tbl RECOVER PARTITIONS&quot;)\n\n# verify the table was created\nspark.sql(&quot;show tables&quot;).show(10, False)\nspark.sql(&quot;show partitions tbl&quot;).show(10, False)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nval create_table_ddl =\n      s&quot;&quot;&quot;CREATE TABLE IF NOT EXISTS tbl (\n         |temp Double,\n         |city String,\n         |vid String,\n         |dt String\n         |)\n         |USING PARQUET\n         |PARTITIONED BY (dt)\n         |LOCATION &#39;${dataset_location}&#39;\n         |&quot;&quot;&quot;.stripMargin\nspark.sql(create_table_ddl)\n\n// Recover the table partitions\nspark.sql(&quot;ALTER TABLE tbl RECOVER PARTITIONS&quot;)\n\n// verify the table was created\nspark.sql(&quot;show tables&quot;).show(false)\nspark.sql(&quot;show partitions tbl&quot;).show(false)\n```</code></pre></div>\n<h3 id=\"indexing-a-hive-table\" style=\"position:relative;\"><a href=\"#indexing-a-hive-table\" aria-label=\"indexing a hive table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Indexing a Hive Table</h3>\n<p>Note we use default.sample as the uri in the Xskipper constructor.</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\n# create an Xskipper instance for the sample Hive Table\nxskipper_hive = Xskipper(spark, &#39;default.tbl&#39;)\n\n# remove index if exists\nif xskipper_hive.isIndexed():\n    xskipper_hive.dropIndex()\n\nxskipper_hive.indexBuilder() \\\n        .addMinMaxIndex(&quot;temp&quot;) \\\n        .addValueListIndex(&quot;city&quot;) \\\n        .addBloomFilterIndex(&quot;vid&quot;) \\\n        .build() \\\n        .show(10, False)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\n// create an Xskipper instance for the sample Hive Table\nval xskipper_hive = new Xskipper(spark, &quot;default.tbl&quot;)\n\n// remove existing index if needed\nif (xskipper_hive.isIndexed()) {\n  xskipper_hive.dropIndex()\n}\n\nxskipper_hive.indexBuilder()\n        .addMinMaxIndex(&quot;temp&quot;)\n        .addValueListIndex(&quot;city&quot;)\n        .addBloomFilterIndex(&quot;vid&quot;)\n        .build()\n        .show(false)\n```</code></pre></div>\n<h3 id=\"running-queries-1\" style=\"position:relative;\"><a href=\"#running-queries-1\" aria-label=\"running queries 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Running Queries</h3>\n<p>Once Xskipper has been enabled you can continue running queries (using either SQL or DataFrame API) and enjoy the benefits of data skipping.</p>\n<p>First, let’s make sure Xskipper is enabled:</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\n# You can use the following to check whether the Xskipper is enabled\nif not Xskipper.isEnabled(spark):\n    Xskipper.enable(spark)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\n// You can use the following to check whether the Xskipper is enabled\nif (!spark.isXskipperEnabled()) {\n    spark.enableXskipper()\n}\n```</code></pre></div>\n<h4 id=\"example-query-using-the-minmax-index-1\" style=\"position:relative;\"><a href=\"#example-query-using-the-minmax-index-1\" aria-label=\"example query using the minmax index 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Example query using the MinMax index</h4>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\nspark.sql(&quot;select * from tbl where temp &lt; 30&quot;).show(false)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nspark.sql(&quot;select * from tbl where temp &lt; 30&quot;).show(false)\n```</code></pre></div>\n<p>Inspecting the query stats:</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\nXskipper.getLatestQueryAggregatedStats(spark).show(10, False)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nXskipper.getLatestQueryAggregatedStats(spark).show(false)\n```</code></pre></div>\n<h3 id=\"index-life-cycle---hive-tables\" style=\"position:relative;\"><a href=\"#index-life-cycle---hive-tables\" aria-label=\"index life cycle   hive tables permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Index Life Cycle - Hive Tables</h3>\n<p>The API is similar to the dataset API but without the need for a <code class=\"language-text\">reader</code> instance.</p>\n<h4 id=\"view-the-index-status\" style=\"position:relative;\"><a href=\"#view-the-index-status\" aria-label=\"view the index status permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>View the index status</h4>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\nxskipper_hive.describeIndex().show(10, False)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nxskipper_hive.describeIndex().show(false)\n```</code></pre></div>\n<h4 id=\"refresh-index-1\" style=\"position:relative;\"><a href=\"#refresh-index-1\" aria-label=\"refresh index 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Refresh Index</h4>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\nxskipper_hive.refreshIndex().show(10, False)\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nxskipper.refreshIndex(reader).show(false)\n```</code></pre></div>\n<h4 id=\"drop-index-1\" style=\"position:relative;\"><a href=\"#drop-index-1\" aria-label=\"drop index 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Drop Index</h4>\n<p>In order to drop the index use the following API call:</p>\n<p>=== “Python”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` python\nxskipper_hive.dropIndex()\n```</code></pre></div>\n<p>=== “Scala”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">``` scala\nxskipper_hive.dropIndex()\n```</code></pre></div>","fields":{"srcLink":"https://github.com/xskipper-io/xskipper/blob/master/site/docs/getting-started/quick-start-guide.md"},"frontmatter":{"title":"","description":null,"extraClasses":null}}},"pageContext":{"id":"56334269-fe61-5773-b333-04bdf454f8aa"}},"staticQueryHashes":["117426894","3000541721","3606484676","533861647"]}