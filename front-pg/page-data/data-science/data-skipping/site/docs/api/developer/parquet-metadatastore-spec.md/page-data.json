{"componentChunkName":"component---src-templates-markdown-js","path":"/data-science/data-skipping/site/docs/api/developer/parquet-metadatastore-spec.md","result":{"data":{"site":{"siteMetadata":{"title":"Operate First"}},"markdownRemark":{"id":"14aceb7f-527a-5d7d-931e-b553c10752ae","html":"<!--\n -- Copyright 2021 IBM Corp.\n -- SPDX-License-Identifier: Apache-2.0\n -->\n<h1 id=\"parquet-metadatastore-spec\" style=\"position:relative;\"><a href=\"#parquet-metadatastore-spec\" aria-label=\"parquet metadatastore spec permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parquet Metadatastore Spec</h1>\n<p>This is a specification for how metadata is represented in the Parquet Metadata store. We support multiple versions and document them here.\nNote that the version number is stored in metadata files in a specific column of their Spark schema.\nBehind the scenes it is saved in the KV Metadata of the resulting Parquet files.\nThis means that the version\nnumber can never imply metadata file locations, prefixes, directory layouts etc.,\nsince if one knows the version number, it means the metadata files have\nalready been located.</p>\n<h2 id=\"how-to-maintain-the-version-numbers\" style=\"position:relative;\"><a href=\"#how-to-maintain-the-version-numbers\" aria-label=\"how to maintain the version numbers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>How to maintain the version numbers</h2>\n<p>The version numbers are natural numbers.\nEach release can change the version number by at most one.\nIn particular, if 2 (or more) changes were made to the specification but no release happened between them, they will be considered as belonging to the same version.</p>\n<p>Note: </p>\n<ol class=\"pf-c-list\">\n<li>Terminology - The terms “KV Store”, “KV Metadata”, “Spark Schema Metadata”, despite having\ndifferent meaning usually, will be used interchangeably to mean the structure\nSpark Schema Metadata, which in itself is assigned per-column.\nwe will use them in the context of describing\nwhat metadata for which column is laid out in what way.</li>\n<li>We will describe the structure of the spark schema, Spark’s per-column\nmetadata, and use Spark types. this will allow us to be detached\nfrom how spark actually represents these structures in the Parquet schema.</li>\n</ol>\n<h2 id=\"format-specifications\" style=\"position:relative;\"><a href=\"#format-specifications\" aria-label=\"format specifications permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Format Specifications</h2>\n<h3 id=\"version-4\" style=\"position:relative;\"><a href=\"#version-4\" aria-label=\"version 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Version 4</h3>\n<p>This version differs from Version 3 by:</p>\n<ol class=\"pf-c-list\">\n<li>Saving the partition columns in the metadata for partitioned table in order to get the indexed files only for relevant partitions </li>\n<li>The partition columns are saved as <code class=\"language-text\">virtual_&lt;column_name&gt;</code></li>\n</ol>\n<h3 id=\"version-3\" style=\"position:relative;\"><a href=\"#version-3\" aria-label=\"version 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Version 3</h3>\n<p>This version differs from Version 2 by:</p>\n<ol class=\"pf-c-list\">\n<li>Configuration parameters prefix changed from <code class=\"language-text\">com.ibm.metaindex</code> to <code class=\"language-text\">io.xskipper</code></li>\n<li>The index parameters are now stored as a map</li>\n</ol>\n<h3 id=\"version-2\" style=\"position:relative;\"><a href=\"#version-2\" aria-label=\"version 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Version 2</h3>\n<p>This version differs from Version 1 by:</p>\n<ol class=\"pf-c-list\">\n<li>\n<p>Column name generation:<br>\nFor each index $I$ (assume $I$ is the name), defined on columns $c<em>1,…,c</em>n$ (in this order),<br>\nfor each $c<em>i$, let $c’</em>i$ denote $c_i$ with the following changes, in this order:</p>\n<ul class=\"pf-c-list\">\n<li>Replace all <code class=\"language-text\">#</code> with <code class=\"language-text\">##</code></li>\n<li>Replace all <code class=\"language-text\">.</code> with <code class=\"language-text\">$#$</code>\nThe column name will be:  $c’<em>1c’</em>2…c’<em>n\\</em>I$len(c’<em>1)-len(c’</em>2)-…-len(c’_n)</li>\n</ul>\n<blockquote>\n<p>That is, the transformed column names concatenated, followed by the index name,\nfollowed by the lengths of the transformed column names concatenated with <code class=\"language-text\">-</code> as the delimiter\nExample of such transformation:\n<code class=\"language-text\">SomeIndex on &quot;lat#_.$_new&quot; and  &quot;$_lng.#&quot;</code> will get <code class=\"language-text\">lat##_$#$$_new_$_lng$#$##_someindex_14-10</code>\nsince <code class=\"language-text\">&quot;lat#_.$_new&quot;</code> will be mapped to <code class=\"language-text\">&quot;lat##_$#$$_new&quot;</code> with length 14, and <code class=\"language-text\">&quot;$_lng.#&quot;</code> will be mapped to <code class=\"language-text\">&quot;$_lng$#$##&quot;</code> with length 10</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"version-1\" style=\"position:relative;\"><a href=\"#version-1\" aria-label=\"version 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Version 1</h3>\n<p>This version differs from version 0 by:</p>\n<ul class=\"pf-c-list\">\n<li>the addition of PME Support.</li>\n<li>changes to the way column names are constructed from indexes</li>\n<li>moving <code class=\"language-text\">tableIdentifier</code> metadata field to be under the <code class=\"language-text\">obj_name</code> column</li>\n<li>Min/Max index is saved as nested field with native parquet types</li>\n<li>Value List is saved as parquet array type</li>\n</ul>\n<p>Notes:</p>\n<ol class=\"pf-c-list\">\n<li>all additions were made in order for our library to be able to regenerate the encryption config (e.g., for refresh or during compaction).<br>\nthese configs are not used by PME itself (PME uses other fields in the parquet file itself, these are not available to us via spark).<br>\nTheoretically it is possible to create a parquet file in which our metadata indicates an encryption config completely different than the one with which it’s actually encrypted. we should avoid that.</li>\n<li><em>IMPORTANT</em> no actual key material is ever written to the KV store, it’s ALWAYS labels (e.g. <code class=\"language-text\">encryption.column.keys</code>)</li>\n<li>As of version 0 (and 1), the set of column names in spark schema for all indexes\nis prefix free. this must remain the case, as the spark column names are used by our lib to\nderive the set of columns in the parquet schema for a specific index (e.g., a <code class=\"language-text\">UDT</code> translated to a column\nwith a different name in the parquet schema).</li>\n</ol>\n<p>Changes:</p>\n<ol class=\"pf-c-list\">\n<li>\n<p>Additions to <code class=\"language-text\">obj_name</code> metadata:\nIf the metadata is not encrypted, then no additions are made.\nIf at least 1 index is encrypted, encryption metadata will be added the following way:</p>\n<ul class=\"pf-c-list\">\n<li>\n<p>key <code class=\"language-text\">encryption</code> of type <code class=\"language-text\">spark.sql.types.Metadata</code>, pointing to a metadata with\nwith the following structure:</p>\n<ul class=\"pf-c-list\">\n<li>key <code class=\"language-text\">encryption.column.keys</code> pointing to a String, containing the key list string for PME.\nthe format of this string matches the format for the config with the same name used in PME. see <a href=\"https://cloud.ibm.com/docs/AnalyticsEngine?topic=AnalyticsEngine-parquet-encryption&#x26;locale=en\">this</a></li>\n<li><em>optional</em> key “encryption.plaintext.footer” of type String, containing one of <code class=\"language-text\">{true, false}</code>, indicating whether or not plaintext footer is used\nif this key is not defined, then plaintext footer is implicitly disabled.</li>\n<li>key <code class=\"language-text\">encryption.footer.key</code> of type String, containing the footer key label (footer master Key ID in PME Terminology).\nthis key is also used to encrypt the footer (the footer is always encrypted if encryption is on)\nthis field is mandatory as a footer key is necessary if we use PME, even if plaintext\nfooter mode is in use (the footer key is used only for signing in this case, and of course for <code class=\"language-text\">obj_name</code>).</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Additions to each index metadata:\nIndexes which are not encrypted remain unchanged.\nFor encrypted indexes, the following is added:</p>\n<ul class=\"pf-c-list\">\n<li>key <code class=\"language-text\">key_metadata</code> of type String, pointing to the label of the key used to encrypt\nthe set of columns for this index.\nThe set of columns for a specific is obtained by acquiring the Parquet schema tree,\nand taking all the paths to leaves which start with the Spark column name for this index\n(this is why the set of spark column names must be prefix free).\nfor example, for a <code class=\"language-text\">MinMax</code> on <code class=\"language-text\">temp</code>,\nthe set of columns we need to encrypt is <code class=\"language-text\">{temp_minmax.metadata}</code></li>\n</ul>\n<p>Note that this key label must be consistent with the one with which the columns for this index are encrypted,<br>\nas configured in the column key list string in the <code class=\"language-text\">obj_name</code> metadata. if they are inconsistent, then this is a bug in the lib.\nthe column key list string is kept in the <code class=\"language-text\">obj_name</code> metadata to save unnecessary scans\nto re-create that config when refreshing/compacting. the <code class=\"language-text\">key_metadata</code> in each index is used\ne.g. when listing existing indexes (to be able to retrieve the <code class=\"language-text\">keyMetadata</code> field in the <code class=\"language-text\">Index</code> case class).</p>\n</li>\n<li>Column names for indexes are generated the same as in version 0, but the delimiter is now <code class=\"language-text\">_</code>\nand not <code class=\"language-text\">:</code>, so for example, a <code class=\"language-text\">SomeIndex</code> over <code class=\"language-text\">a,b</code> would have gotten the column name <code class=\"language-text\">a:b_someindex</code> in version 0, now gets the column name <code class=\"language-text\">a_b_someindex</code></li>\n<li><code class=\"language-text\">tableIdentifier</code> metadata field is now saved only under the <code class=\"language-text\">obj_name</code> column (removed from index columns).</li>\n<li>Min/Max index is saved by having a nested field with <code class=\"language-text\">min</code> and <code class=\"language-text\">max</code> subfields each containing the value in native parquet type.</li>\n<li>Value List index is saved by saving an array data type</li>\n</ol>\n<h3 id=\"version-0\" style=\"position:relative;\"><a href=\"#version-0\" aria-label=\"version 0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Version 0</h3>\n<p>The metadata is represented by one row for each object, with the object\nname in its own column, and the metadata for each index in its own column as well,\nwith the actual content of the metadata being the serialization of the UDT\nfor this specific Metadata type.</p>\n<ol class=\"pf-c-list\">\n<li>\n<p><code class=\"language-text\">obj_name</code> column:\nstores the object name.</p>\n<ul class=\"pf-c-list\">\n<li>\n<p>For Unversioned files, defined as</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"> StructField<span class=\"token punctuation\">(</span><span class=\"token string\">\"obj_name\"</span><span class=\"token punctuation\">,</span> StringType<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>That is, a non-nullable column named “obj_name”</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">     of type String, without metadata.</code></pre></div>\n</li>\n<li>\n<p>For Versioned files (that is, version 0), defined as:</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> objNameMeta <span class=\"token operator\">=</span>  <span class=\"token keyword\">new</span> sql<span class=\"token punctuation\">.</span>types<span class=\"token punctuation\">.</span>MetadataBuilder<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">.</span>putLong<span class=\"token punctuation\">(</span><span class=\"token string\">\"version\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">.</span>build<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    StructField<span class=\"token punctuation\">(</span><span class=\"token string\">\"obj_name\"</span><span class=\"token punctuation\">,</span> StringType<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> objNameMeta<span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>That is, a non-nullable column named “obj_name”\nof type String, with Metadata containing a single key, “version”,\nthat points to a Long</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>Per-Index Columns:</p>\n<p>For each index $I$ (assume $I$ is the name), defined on columns $c<em>1,…,c</em>n$ (in this order),<br>\nwith UDT type T and params given as</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">params <span class=\"token operator\">:</span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> </code></pre></div>\n<p>A column with the following properties is defined:</p>\n<ul class=\"pf-c-list\">\n<li>\n<p><code class=\"language-text\">name</code>: $c<em>1,…,c</em>n$_$I$</p>\n<blockquote>\n<p>that is, the column names concatenated with a ”:” delimiter, followed by\nthe index name concatenated with <code class=\"language-text\">_</code></p>\n</blockquote>\n</li>\n<li>\n<p><code class=\"language-text\">dataType</code>: <code class=\"language-text\">T</code></p>\n<blockquote>\n<p>That is, the UDT associated with this index.</p>\n</blockquote>\n</li>\n<li><code class=\"language-text\">nullable</code> - <code class=\"language-text\">true</code></li>\n<li>\n<p><code class=\"language-text\">metadata</code>, a single key named <code class=\"language-text\">index</code>, pointing to another <code class=\"language-text\">spark.sql.types.Metadata</code><br>\nwith the following structure:</p>\n<ul class=\"pf-c-list\">\n<li>key <code class=\"language-text\">cols</code>, pointing to a <code class=\"language-text\">java.lang.String[]</code> containing the index columns.</li>\n<li>key <code class=\"language-text\">name</code>, pointing to the String <code class=\"language-text\">I</code></li>\n<li>\n<p>key <code class=\"language-text\">tableIdentifier</code>, pointing to String generated from the URI in the following manner:</p>\n<ul class=\"pf-c-list\">\n<li>if the URI’s Scheme is <code class=\"language-text\">COS</code>, then <code class=\"language-text\">&lt;bucket_name&gt;/&lt;object_name&gt;</code></li>\n<li>else, if the path for this URI (obtained by <code class=\"language-text\">new URI(uri).getPath()</code>)\nstarts with a ”/”, the the preceding / is trimmed from this path, else it’s unchanged.</li>\n</ul>\n</li>\n<li>Optional if <code class=\"language-text\">params</code> is not empty, then a key <code class=\"language-text\">params</code> points to <code class=\"language-text\">params</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"unversioned-files\" style=\"position:relative;\"><a href=\"#unversioned-files\" aria-label=\"unversioned files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Unversioned Files</h3>\n<p>The Layout of the KV Store had several incarnations before it was versioned, so if looking at a metadata file (or group of files) without a version number,\nwe will implicitly treat them as version 0, which will act as  the “as-built drawing” for the KV Store layout, as of the time the version number was introduced.<br>\nIt’s not defined what will happen should we encounter a file without a version, with KV Layout other than version 0.</p>","fields":{"srcLink":"https://github.com/xskipper-io/xskipper/blob/master/site/docs/api/developer/parquet-metadatastore-spec.md"},"frontmatter":{"title":"","description":null,"extraClasses":null}}},"pageContext":{"id":"14aceb7f-527a-5d7d-931e-b553c10752ae"}},"staticQueryHashes":["117426894","3000541721","3606484676","533861647"]}